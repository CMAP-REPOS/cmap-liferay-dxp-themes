!function(factory) {
    "function" == typeof define && define.amd ? define([ "jquery" ], factory) : "object" == typeof exports ? module.exports = factory(require("jquery")) : factory(jQuery);
}(function($, undefined) {
    "use strict";
    var pluginName = "drilldown", defaults = {
        event: "click",
        selector: "a",
        speed: 100,
        cssClass: {
            container: pluginName + "-container",
            root: pluginName + "-root",
            sub: pluginName + "-sub",
            back: pluginName + "-back"
        }
    }, Plugin = function() {
        function Plugin(element, options) {
            var inst = this;
            this._name = pluginName, this._defaults = defaults, this.element = element, this.$element = $(element), 
            this.options = $.extend({}, defaults, options), this._history = [], this._css = {
                "float": "left",
                width: null
            }, this.$container = this.$element.find("." + this.options.cssClass.container), 
            this.$element.on(this.options.event + "." + pluginName, this.options.selector, function(e) {
                handleAction.call(inst, e, $(this));
            });
        }
        function handleAction(e, $trigger) {
            var $next = $trigger.nextAll("." + this.options.cssClass.sub), preventDefault = !0;
            $next.length ? down.call(this, $next) : $trigger.closest("." + this.options.cssClass.back).length ? up.call(this) : preventDefault = !1, 
            preventDefault && "A" === $trigger.prop("tagName") && e.preventDefault();
        }
        function down($next) {
            $next.length && (this._css.width = this.$element.outerWidth(), this.$container.width(2 * this._css.width), 
            $next = $next.clone(!0).removeClass(this.options.cssClass.sub).addClass(this.options.cssClass.root), 
            this.$container.append($next), animateDrilling.call(this, -1 * this._css.width, function() {
                var $current = $next.prev();
                this._history.push($current.detach()), restoreState.call(this, $next);
            }.bind(this)));
        }
        function up() {
            var $next = this._history.pop();
            this._css.width = this.$element.outerWidth(), this.$container.width(2 * this._css.width), 
            this.$container.prepend($next), animateDrilling.call(this, 0, function() {
                var $current = $next.next();
                $current.remove(), restoreState.call(this, $next);
            }.bind(this));
        }
        function animateDrilling(marginLeft, callback) {
            var $menus = this.$container.children("." + this.options.cssClass.root);
            $menus.css(this._css), $menus.first().animate({
                marginLeft: marginLeft
            }, this.options.speed, callback);
        }
        function restoreState($menu) {
            $menu.css({
                "float": "",
                width: "",
                marginLeft: ""
            }), this.$container.css("width", "");
        }
        return Plugin.prototype = {
            destroy: function() {
                this.reset(), this.$element.off(this.options.event + "." + pluginName, this.options.selector);
            },
            reset: function() {
                var $root;
                this._history.length && ($root = this._history[0], this.$container.empty().append($root), 
                restoreState.call(this, $root)), this._history = [], this._css = {
                    "float": "left",
                    width: null
                };
            }
        }, Plugin;
    }();
    $.fn[pluginName] = function(options) {
        return this.each(function() {
            var inst = $.data(this, pluginName), method = options;
            inst ? "string" == typeof method && ("destroy" === method && $.removeData(this, pluginName), 
            "function" == typeof inst[method] && inst[method]()) : $.data(this, pluginName, new Plugin(this, options));
        });
    };
}), function(window, $) {
    $.fn.stickyNav = function() {
        var $getElement = $($(this).selector);
        if ($getElement.length > 0) {
            var elementPosTop = $getElement.offset().top, elementHeight = $getElement.outerHeight(), $elementParent = $getElement.parent(), elementParentHeight = $elementParent.outerHeight(), elementParentPosTop = $elementParent.offset().top, elementParentPosBottom = elementParentHeight + elementParentPosTop;
            $(window).scroll(function() {
                var windowPosTop = $(window).scrollTop(), elementParentPosTop_temp = ($getElement.offset().top, 
                $getElement.parent().offset().top);
                windowPosTop > elementPosTop && elementParentPosBottom > windowPosTop + elementHeight ? $getElement.css({
                    position: "relative",
                    top: windowPosTop - elementParentPosTop_temp
                }).addClass("sticky") : elementPosTop > windowPosTop && $getElement.css({
                    top: 0
                }).removeClass("sticky");
            });
        }
    };
}(window, jQuery), function($) {
    $.fn.accordionList = function(options) {
        var defaults;
        return defaults = {
            title: ".title",
            description: ".description",
            currentClass: "current",
            slideSpeed: 400,
            showFirst: !1,
            onAfter: function(el) {}
        }, options = $.extend({}, defaults, options), this.each(function() {
            var $container = $(this);
            if ($container.length) {
                var $title = $container.find(options.title), $descriptions = $container.find(options.description);
                options.showFirst ? $descriptions.not(":first").hide().end().first().parent().addClass(options.currentClass) : $descriptions.hide(), 
                $title.on("click", function() {
                    var $this = $(this), isCurrent = $this.parent().hasClass(options.currentClass), $description = $(this).siblings(options.description);
                    return $title.parent().removeClass(options.currentClass), $descriptions.slideUp(options.slideSpeed), 
                    isCurrent || ($this.parent().addClass(options.currentClass), $description.slideDown(options.slideSpeed)), 
                    setTimeout(function() {
                        options.onAfter($this);
                    }, options.slideSpeed + 1), !1;
                });
            }
        });
    };
}(jQuery), function($) {
    $.fn.sortList = function(options) {
        var settings = $.extend({
            sortBy: $(this).data("sort-by") || "name",
            sortOrder: $(this).data("sort-order") || "desc",
            sortGroup: void 0 != $(this).data("sort-group") ? $(this).data("sort-group").toString() : !0,
            sortID: 0
        }, options);
        return this.each(function(i, obj) {
            var $currentList = $(this), sortBy = settings.sortBy, sortOrder = settings.sortOrder, sortGroup = settings.sortGroup, list = {
                letters: []
            }, $alphabetHeadings = $("<ul />", {
                "class": "letter-headings"
            });
            $currentList.length && $currentList.children().each(function(i, obj) {
                var name = $(obj).find("." + sortBy).text(), letter = name.substring(0, 1);
                letter in list || (list[letter] = [], list.letters.push(letter)), list[letter].push(obj);
            }), "asc" == sortOrder.toLowerCase() ? list.letters.sort().reverse() : list.letters.sort(), 
            _tempList = [], $.each(list.letters, function(i, letter) {
                if ("true" === sortGroup) {
                    var $letterList = $("<li />", {
                        "class": "letter " + letter.toLowerCase(),
                        text: letter
                    }), _$letterHeading = $letterList.clone(), $letterListContainer = $("<ul />");
                    0 == i && ($letterList.addClass("active"), _$letterHeading.addClass("active")), 
                    $alphabetHeadings.append(_$letterHeading), $letterList.append($letterListContainer), 
                    _tempList.push($letterList);
                }
                list[letter].sort(function(a, b) {
                    return $(a).find(".name").text() < $(b).find(".name").text() ? "asc" == sortOrder.toLowerCase() ? 1 : -1 : 0;
                }), $.each(list[letter], function(i, items) {
                    "true" === sortGroup ? $letterListContainer.append(items) : _tempList.push($(items));
                });
            }), $currentList.before($alphabetHeadings.attr("data-sort-id", i).addClass("sort-headings no-list")), 
            $currentList.attr("data-sort-id", i).empty().append(_tempList), $('[data-sort-id="' + i + '"]').on("click", ".letter", function(e) {
                var $el = $(this), letter = $el.text().toLowerCase();
                $el.siblings().removeClass("active"), $el.addClass("active"), $('.sort[data-sort-id="' + i + '"]').find(".letter").removeClass("active"), 
                $('.sort[data-sort-id="' + i + '"]').find("." + letter).addClass("active");
            });
        });
    }, $(function() {
        $(".sort").sortList();
    });
}(jQuery), function($) {
    "use strict";
    var windowHeight = null, documentHeight = null, activeSimpleselects = [], isSsActivationForbidden = !1, isNextDocumentClickEventDisabled = !1, init = function(options) {
        options = $.extend({}, {
            fadingDuration: options && options.fadeSpeed || 0,
            containerMargin: 5,
            displayContainerInside: "window"
        }, options), this.each(function() {
            var t = $(this).addClass("simpleselected"), simpleselect = $('<div class="simpleselect"></div>'), ssPlaceholder = $('<div class="placeholder"></div>').appendTo(simpleselect), ssOptionsContainer = $('<div class="options"></div>').appendTo(simpleselect), selectIdAttribute = t.attr("id");
            selectIdAttribute && simpleselect.attr("id", "simpleselect_" + selectIdAttribute), 
            t.off("change"), t.attr("size", 2);
            var ssData = {
                select: t,
                selectOptions: null,
                simpleselect: simpleselect,
                ssPlaceholder: ssPlaceholder,
                ssOptionsContainer: ssOptionsContainer,
                ssOptionsContainerHeight: null,
                ssOptions: null,
                canBeClosed: !0,
                isActive: !1,
                isScrollable: !1,
                isDisabled: !1,
                options: options
            };
            simpleselect.data("simpleselect", ssData).on({
                mousedown: function() {
                    ssData.canBeClosed = !1;
                },
                click: function(e) {
                    var eventTarget = $(e.target);
                    if (console.log("v4"), eventTarget.hasClass("placeholder")) if (eventTarget.parent().hasClass("active")) publicMethods.setInactive.call(ssData); else if (jQuery(window).width() <= 415 && !eventTarget.parent().hasClass("active")) {
                        var metaData = jQuery(".page-meta-data"), metaDataHeight = -6;
                        "fixed" != metaData.css("position") && (metaDataHeight = metaData.height());
                        var newScrollTop = eventTarget.offset().top - (52 + metaDataHeight), curScrollTop = jQuery("body").scrollTop();
                        if (curScrollTop != newScrollTop) {
                            var duration = 2 * Math.abs(newScrollTop - curScrollTop);
                            duration > 500 && (duration = 500), jQuery("body").animate({
                                scrollTop: newScrollTop
                            }, duration, function() {
                                publicMethods.setActive.call(ssData);
                            });
                        } else publicMethods.setActive.call(ssData);
                    } else publicMethods.setActive.call(ssData); else eventTarget.hasClass("option") && (isSsActivationForbidden = !0, 
                    selectOption.call(ssData, eventTarget), publicMethods.setInactive.call(ssData));
                },
                mouseup: function() {
                    ssData.canBeClosed = !0;
                },
                mouseover: function(e) {
                    var eventTarget = $(e.target);
                    eventTarget.hasClass("option") && selectSsOption.call(ssData, eventTarget);
                }
            }), t.data("simpleselect", ssData).on({
                keydown: function(e) {
                    13 == e.keyCode && publicMethods.setInactive.call(ssData);
                },
                focus: function() {
                    isSsActivationForbidden || publicMethods.setActive.call(ssData);
                },
                blur: function() {
                    ssData.canBeClosed && publicMethods.setInactive.call(ssData);
                },
                change: function(e, shouldLetChangeEventThrough) {
                    shouldLetChangeEventThrough || e.stopImmediatePropagation();
                    var optionToSelect = getSsOptionToSelect.call(ssData);
                    selectSsOption.call(ssData, optionToSelect, !0);
                },
                click: function(e) {
                    e.stopPropagation();
                }
            }), t.after(simpleselect);
            var hiddenSelectContainer = $('<div class="hidden_select_container"></div>');
            t.after(hiddenSelectContainer).appendTo(hiddenSelectContainer), populateSs.call(ssData), 
            updateSsState.call(ssData), publicMethods.updatePresentationDependentVariables.call(ssData);
        });
    }, updateWindowHeightValue = function() {
        windowHeight = $(window).height();
    }, addToActiveSimpleselects = function(simpleselect) {
        activeSimpleselects.push(simpleselect);
    }, removeFromActiveSimpleselects = function(simpleselect) {
        activeSimpleselects = $.grep(activeSimpleselects, function(val) {
            return val !== simpleselect;
        });
    }, populateSs = function() {
        this.selectOptions = this.select.find("option");
        var ssOptionsAndOptgroups = "", addOption = function(selectOption) {
            ssOptionsAndOptgroups += '<div class="option">' + selectOption.text() + "</div>";
        }, addOptgroup = function(selectOptgroup) {
            ssOptionsAndOptgroups += '<div class="optgroup">';
            var label = selectOptgroup.attr("label");
            label && (ssOptionsAndOptgroups += '<div class="optgroup-label">' + htmlEncode(label) + "</div>"), 
            selectOptgroup.children("option").each(function() {
                addOption($(this));
            }), ssOptionsAndOptgroups += "</div>";
        }, htmlEncode = function(html) {
            return html.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#039;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        }, selectChildren = this.select.children("optgroup, option"), selectHasOptgroups = !1;
        selectChildren.each(function() {
            var t = $(this);
            t.is("optgroup") ? (addOptgroup(t), selectHasOptgroups = !0) : addOption(t);
        }), this.ssOptions = this.ssOptionsContainer.html(ssOptionsAndOptgroups).find(".option"), 
        this.ssPlaceholder.text(getSsOptionToSelect.call(this).text());
    }, updateSsState = function() {
        this.isDisabled = this.select.prop("disabled"), this.simpleselect[this.isDisabled ? "addClass" : "removeClass"]("disabled");
    }, selectSsOption = function(ssOption, canBeOutOfSight) {
        if (this.ssOptions.removeClass("active"), ssOption.addClass("active"), canBeOutOfSight && this.isScrollable) {
            var toScrollTo, ssOptionPosition = ssOption.position(), ssOptionsContainerScrollTop = this.ssOptionsContainer.scrollTop(), topViewOffset = ssOptionPosition.top, bottomViewOffset = this.ssOptionsContainer.height() - (ssOptionPosition.top + ssOption.outerHeight());
            0 > topViewOffset ? toScrollTo = ssOptionsContainerScrollTop + topViewOffset : 0 > bottomViewOffset && (toScrollTo = ssOptionsContainerScrollTop - bottomViewOffset), 
            this.ssOptionsContainer.scrollTop(toScrollTo);
        }
    }, getSsOptionToSelect = function() {
        var selectedOption = getSelectedOption.call(this), selectedOptionIndex = selectedOption.length ? this.selectOptions.index(selectedOption) : 0;
        return $(this.ssOptions[selectedOptionIndex]);
    }, selectOption = function(ssOption) {
        var optionToSelect = $(this.selectOptions[this.ssOptions.index(ssOption)]);
        this.select.val(optionToSelect.val());
    }, getSelectedOption = function() {
        return this.selectOptions.filter(":selected").first();
    }, resetSsOptionsContainerCSS = function() {
        this.ssOptionsContainer.css({
            height: "auto",
            "overflow-y": "visible"
        });
    }, forceRepaint = function() {
        this.ssOptionsContainer.hide(), this.ssOptionsContainer[0].offsetHeight, this.ssOptionsContainer.show();
    }, positionAroundSsOption = function(ssOption) {
        resetSsOptionsContainerCSS.call(this);
        var ssOptionPosition, freeVisibleSpaceAbove, freeVisibleSpaceBelow, spaceLeftAboveAfterPositioning, spaceLeftBelowAfterPositioning, excessSpaceAbove, excessSpaceBelow, shouldDisplayContainerInsideWindow = "window" == this.options.displayContainerInside, computePositioningValues = $.proxy(function() {
            ssOptionPosition = ssOption.position(), freeVisibleSpaceAbove = this.ssPlaceholderOffset.top - this.options.containerMargin - (shouldDisplayContainerInsideWindow ? $(window).scrollTop() : 0), 
            freeVisibleSpaceBelow = (shouldDisplayContainerInsideWindow ? windowHeight : documentHeight) - freeVisibleSpaceAbove - this.ssPlaceholderHeight - 2 * this.options.containerMargin, 
            spaceLeftAboveAfterPositioning = freeVisibleSpaceAbove - ssOptionPosition.top, spaceLeftBelowAfterPositioning = freeVisibleSpaceBelow - (this.ssOptionsContainerOuterHeight - ssOptionPosition.top - this.ssPlaceholderHeight), 
            excessSpaceAbove = 0 > spaceLeftAboveAfterPositioning ? Math.abs(spaceLeftAboveAfterPositioning) : 0, 
            excessSpaceBelow = 0 > spaceLeftBelowAfterPositioning ? Math.abs(spaceLeftBelowAfterPositioning) : 0;
        }, this);
        computePositioningValues();
        var wasScrollable = this.isScrollable;
        if (this.isScrollable = 0 > spaceLeftBelowAfterPositioning, this.isScrollable) {
            this.ssOptionsContainer.css({
                height: "auto",
                "overflow-y": "scroll"
            }), this.ssOptionsContainer.height() != this.ssOptionsContainerHeight && (forceRepaint.call(this), 
            publicMethods.updatePresentationDependentVariables.call(this, "ssOptionsContainer", !1), 
            computePositioningValues());
            var ssOptionsContainerNewHeight = this.ssOptionsContainer.height() - excessSpaceAbove - excessSpaceBelow;
            this.ssOptionsContainer.height(ssOptionsContainerNewHeight).scrollTop(excessSpaceAbove);
        } else wasScrollable && forceRepaint.call(this);
    }, publicMethods = {
        updatePresentationDependentVariables: function(variablesToUpdate, updateSafely) {
            variablesToUpdate && "ssPlaceholder" != variablesToUpdate || (this.ssPlaceholderOffset = this.ssPlaceholder.offset(), 
            this.ssPlaceholderHeight = this.ssPlaceholder.outerHeight()), variablesToUpdate && "ssOptionsContainer" != variablesToUpdate || (updateSafely !== !1 && resetSsOptionsContainerCSS.call(this), 
            this.ssOptionsContainerOuterHeight = this.ssOptionsContainer.outerHeight(!0), this.ssOptionsContainerHeight = this.ssOptionsContainer.height());
        },
        refreshContents: function() {
            populateSs.call(this), publicMethods.updatePresentationDependentVariables.call(this);
        },
        refreshState: function() {
            updateSsState.call(this);
        },
        disable: function() {
            this.select.prop("disabled", !0), publicMethods.refreshState.call(this);
        },
        enable: function() {
            this.select.prop("disabled", !1), publicMethods.refreshState.call(this);
        },
        setActive: function() {
            if (!this.isActive && !this.isDisabled && this.ssOptions.length) {
                this.lastValue = this.select.val(), this.simpleselect.addClass("active"), this.isActive = !0, 
                addToActiveSimpleselects.call(this, this.simpleselect);
                var optionToSelect = getSsOptionToSelect.call(this);
                selectSsOption.call(this, optionToSelect), documentHeight = $(document).height(), 
                this.ssOptionsContainer.fadeTo(0, 0).fadeTo(this.options.fadingDuration, 1), positionAroundSsOption.call(this, optionToSelect), 
                isNextDocumentClickEventDisabled = !0;
            }
        },
        setInactive: function() {
            if (this.isActive) {
                this.simpleselect.removeClass("active"), this.isActive = !1, removeFromActiveSimpleselects.call(this, this.simpleselect), 
                this.ssOptionsContainer.fadeOut(this.options.fadingDuration);
                var currentValue = this.select.val();
                this.lastValue != currentValue && (this.ssPlaceholder.text(getSelectedOption.call(this).text()), 
                this.select.trigger("change", [ !0 ]));
            }
        }
    };
    $.fn.simpleselect = function(method) {
        if (publicMethods[method]) {
            var args = Array.prototype.slice.call(arguments, 1);
            this.each(function() {
                publicMethods[method].apply($(this).data("simpleselect"), args);
            });
        } else init.apply(this, arguments);
        return this;
    }, $(document).ready(function() {
        updateWindowHeightValue(), $(window).on("resize.simpleselect", function() {
            updateWindowHeightValue();
        }), $(document).on("click.simpleselect keyup.simpleselect", function(e) {
            if ("click" == e.type && (setTimeout(function() {
                isSsActivationForbidden = !1;
            }, 0), isNextDocumentClickEventDisabled)) return void (isNextDocumentClickEventDisabled = !1);
            if ("click" == e.type || "keyup" == e.type && 27 == e.keyCode) {
                var activeSimpleselectsLength = activeSimpleselects.length;
                if (activeSimpleselectsLength) for (var activeSimpleselectsCopy = activeSimpleselects.slice(0), i = 0; activeSimpleselectsLength > i; i++) activeSimpleselectsCopy[i].simpleselect("setInactive");
            }
        });
    });
}(jQuery), function(factory) {
    "use strict";
    "function" == typeof define && define.amd ? define([ "jquery" ], factory) : "undefined" != typeof exports ? module.exports = factory(require("jquery")) : factory(jQuery);
}(function($) {
    "use strict";
    var Slick = window.Slick || {};
    Slick = function() {
        function Slick(element, settings) {
            var dataSettings, responsiveSettings, breakpoint, _ = this;
            if (_.defaults = {
                accessibility: !0,
                adaptiveHeight: !1,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: !0,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="previous">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="next">Next</button>',
                autoplay: !1,
                autoplaySpeed: 3e3,
                centerMode: !1,
                centerPadding: "50px",
                cssEase: "ease",
                customPaging: function(slider, i) {
                    return '<button type="button" data-role="none">' + (i + 1) + "</button>";
                },
                dots: !1,
                dotsClass: "slick-dots",
                draggable: !0,
                easing: "linear",
                edgeFriction: .35,
                fade: !1,
                focusOnSelect: !1,
                infinite: !0,
                initialSlide: 0,
                lazyLoad: "ondemand",
                mobileFirst: !1,
                pauseOnHover: !0,
                pauseOnDotsHover: !1,
                respondTo: "window",
                responsive: null,
                rows: 1,
                rtl: !1,
                slide: "",
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: !0,
                swipeToSlide: !1,
                touchMove: !0,
                touchThreshold: 5,
                useCSS: !0,
                variableWidth: !1,
                vertical: !1,
                verticalSwiping: !1,
                waitForAnimate: !0
            }, _.initials = {
                animating: !1,
                dragging: !1,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: !1,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: !1
            }, $.extend(_, _.initials), _.activeBreakpoint = null, _.animType = null, _.animProp = null, 
            _.breakpoints = [], _.breakpointSettings = [], _.cssTransitions = !1, _.hidden = "hidden", 
            _.paused = !1, _.positionProp = null, _.respondTo = null, _.rowCount = 1, _.shouldClick = !0, 
            _.$slider = $(element), _.$slidesCache = null, _.transformType = null, _.transitionType = null, 
            _.visibilityChange = "visibilitychange", _.windowWidth = 0, _.windowTimer = null, 
            dataSettings = $(element).data("slick") || {}, _.options = $.extend({}, _.defaults, dataSettings, settings), 
            _.currentSlide = _.options.initialSlide, _.originalSettings = _.options, responsiveSettings = _.options.responsive || null, 
            responsiveSettings && responsiveSettings.length > -1) {
                _.respondTo = _.options.respondTo || "window";
                for (breakpoint in responsiveSettings) responsiveSettings.hasOwnProperty(breakpoint) && (_.breakpoints.push(responsiveSettings[breakpoint].breakpoint), 
                _.breakpointSettings[responsiveSettings[breakpoint].breakpoint] = responsiveSettings[breakpoint].settings);
                _.breakpoints.sort(function(a, b) {
                    return _.options.mobileFirst === !0 ? a - b : b - a;
                });
            }
            "undefined" != typeof document.mozHidden ? (_.hidden = "mozHidden", _.visibilityChange = "mozvisibilitychange") : "undefined" != typeof document.msHidden ? (_.hidden = "msHidden", 
            _.visibilityChange = "msvisibilitychange") : "undefined" != typeof document.webkitHidden && (_.hidden = "webkitHidden", 
            _.visibilityChange = "webkitvisibilitychange"), _.autoPlay = $.proxy(_.autoPlay, _), 
            _.autoPlayClear = $.proxy(_.autoPlayClear, _), _.changeSlide = $.proxy(_.changeSlide, _), 
            _.clickHandler = $.proxy(_.clickHandler, _), _.selectHandler = $.proxy(_.selectHandler, _), 
            _.setPosition = $.proxy(_.setPosition, _), _.swipeHandler = $.proxy(_.swipeHandler, _), 
            _.dragHandler = $.proxy(_.dragHandler, _), _.keyHandler = $.proxy(_.keyHandler, _), 
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _), _.instanceUid = instanceUid++, 
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, _.init(), _.checkResponsive(!0);
        }
        var instanceUid = 0;
        return Slick;
    }(), Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {
        var _ = this;
        if ("boolean" == typeof index) addBefore = index, index = null; else if (0 > index || index >= _.slideCount) return !1;
        _.unload(), "number" == typeof index ? 0 === index && 0 === _.$slides.length ? $(markup).appendTo(_.$slideTrack) : addBefore ? $(markup).insertBefore(_.$slides.eq(index)) : $(markup).insertAfter(_.$slides.eq(index)) : addBefore === !0 ? $(markup).prependTo(_.$slideTrack) : $(markup).appendTo(_.$slideTrack), 
        _.$slides = _.$slideTrack.children(this.options.slide), _.$slideTrack.children(this.options.slide).detach(), 
        _.$slideTrack.append(_.$slides), _.$slides.each(function(index, element) {
            $(element).attr("data-slick-index", index);
        }), _.$slidesCache = _.$slides, _.reinit();
    }, Slick.prototype.animateHeight = function() {
        var _ = this;
        if (1 === _.options.slidesToShow && _.options.adaptiveHeight === !0 && _.options.vertical === !1) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(!0);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    }, Slick.prototype.animateSlide = function(targetLeft, callback) {
        var animProps = {}, _ = this;
        _.animateHeight(), _.options.rtl === !0 && _.options.vertical === !1 && (targetLeft = -targetLeft), 
        _.transformsEnabled === !1 ? _.options.vertical === !1 ? _.$slideTrack.animate({
            left: targetLeft
        }, _.options.speed, _.options.easing, callback) : _.$slideTrack.animate({
            top: targetLeft
        }, _.options.speed, _.options.easing, callback) : _.cssTransitions === !1 ? (_.options.rtl === !0 && (_.currentLeft = -_.currentLeft), 
        $({
            animStart: _.currentLeft
        }).animate({
            animStart: targetLeft
        }, {
            duration: _.options.speed,
            easing: _.options.easing,
            step: function(now) {
                now = Math.ceil(now), _.options.vertical === !1 ? (animProps[_.animType] = "translate(" + now + "px, 0px)", 
                _.$slideTrack.css(animProps)) : (animProps[_.animType] = "translate(0px," + now + "px)", 
                _.$slideTrack.css(animProps));
            },
            complete: function() {
                callback && callback.call();
            }
        })) : (_.applyTransition(), targetLeft = Math.ceil(targetLeft), _.options.vertical === !1 ? animProps[_.animType] = "translate3d(" + targetLeft + "px, 0px, 0px)" : animProps[_.animType] = "translate3d(0px," + targetLeft + "px, 0px)", 
        _.$slideTrack.css(animProps), callback && setTimeout(function() {
            _.disableTransition(), callback.call();
        }, _.options.speed));
    }, Slick.prototype.asNavFor = function(index) {
        var _ = this, asNavFor = null !== _.options.asNavFor ? $(_.options.asNavFor).slick("getSlick") : null;
        null !== asNavFor && asNavFor.slideHandler(index, !0);
    }, Slick.prototype.applyTransition = function(slide) {
        var _ = this, transition = {};
        _.options.fade === !1 ? transition[_.transitionType] = _.transformType + " " + _.options.speed + "ms " + _.options.cssEase : transition[_.transitionType] = "opacity " + _.options.speed + "ms " + _.options.cssEase, 
        _.options.fade === !1 ? _.$slideTrack.css(transition) : _.$slides.eq(slide).css(transition);
    }, Slick.prototype.autoPlay = function() {
        var _ = this;
        _.autoPlayTimer && clearInterval(_.autoPlayTimer), _.slideCount > _.options.slidesToShow && _.paused !== !0 && (_.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed));
    }, Slick.prototype.autoPlayClear = function() {
        var _ = this;
        _.autoPlayTimer && clearInterval(_.autoPlayTimer);
    }, Slick.prototype.autoPlayIterator = function() {
        var _ = this;
        _.options.infinite === !1 ? 1 === _.direction ? (_.currentSlide + 1 === _.slideCount - 1 && (_.direction = 0), 
        _.slideHandler(_.currentSlide + _.options.slidesToScroll)) : (_.currentSlide - 1 === 0 && (_.direction = 1), 
        _.slideHandler(_.currentSlide - _.options.slidesToScroll)) : _.slideHandler(_.currentSlide + _.options.slidesToScroll);
    }, Slick.prototype.buildArrows = function() {
        var _ = this;
        _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.$prevArrow = $(_.options.prevArrow), 
        _.$nextArrow = $(_.options.nextArrow), _.htmlExpr.test(_.options.prevArrow) && _.$prevArrow.appendTo(_.options.appendArrows), 
        _.htmlExpr.test(_.options.nextArrow) && _.$nextArrow.appendTo(_.options.appendArrows), 
        _.options.infinite !== !0 && _.$prevArrow.addClass("slick-disabled"));
    }, Slick.prototype.buildDots = function() {
        var i, dotString, _ = this;
        if (_.options.dots === !0 && _.slideCount > _.options.slidesToShow) {
            for (dotString = '<ul class="' + _.options.dotsClass + '">', i = 0; i <= _.getDotCount(); i += 1) dotString += "<li>" + _.options.customPaging.call(this, _, i) + "</li>";
            dotString += "</ul>", _.$dots = $(dotString).appendTo(_.options.appendDots), _.$dots.find("li").first().addClass("slick-active").attr("aria-hidden", "false");
        }
    }, Slick.prototype.buildOut = function() {
        var _ = this;
        _.$slides = _.$slider.children(":not(.slick-cloned)").addClass("slick-slide"), _.slideCount = _.$slides.length, 
        _.$slides.each(function(index, element) {
            $(element).attr("data-slick-index", index);
        }), _.$slidesCache = _.$slides, _.$slider.addClass("slick-slider"), _.$slideTrack = 0 === _.slideCount ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent(), 
        _.$list = _.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(), 
        _.$slideTrack.css("opacity", 0), (_.options.centerMode === !0 || _.options.swipeToSlide === !0) && (_.options.slidesToScroll = 1), 
        $("img[data-lazy]", _.$slider).not("[src]").addClass("slick-loading"), _.setupInfinite(), 
        _.buildArrows(), _.buildDots(), _.updateDots(), _.options.accessibility === !0 && _.$list.prop("tabIndex", 0), 
        _.setSlideClasses("number" == typeof this.currentSlide ? this.currentSlide : 0), 
        _.options.draggable === !0 && _.$list.addClass("draggable");
    }, Slick.prototype.buildRows = function() {
        var a, b, c, newSlides, numOfSlides, originalSlides, slidesPerSection, _ = this;
        if (newSlides = document.createDocumentFragment(), originalSlides = _.$slider.children(), 
        _.options.rows > 1) {
            for (slidesPerSection = _.options.slidesPerRow * _.options.rows, numOfSlides = Math.ceil(originalSlides.length / slidesPerSection), 
            a = 0; numOfSlides > a; a++) {
                var slide = document.createElement("div");
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement("div");
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
                        originalSlides.get(target) && row.appendChild(originalSlides.get(target));
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }
            _.$slider.html(newSlides), _.$slider.children().children().children().width(100 / _.options.slidesPerRow + "%").css({
                display: "inline-block"
            });
        }
    }, Slick.prototype.checkResponsive = function(initial) {
        var breakpoint, targetBreakpoint, respondToWidth, _ = this, sliderWidth = _.$slider.width(), windowWidth = window.innerWidth || $(window).width();
        if ("window" === _.respondTo ? respondToWidth = windowWidth : "slider" === _.respondTo ? respondToWidth = sliderWidth : "min" === _.respondTo && (respondToWidth = Math.min(windowWidth, sliderWidth)), 
        _.originalSettings.responsive && _.originalSettings.responsive.length > -1 && null !== _.originalSettings.responsive) {
            targetBreakpoint = null;
            for (breakpoint in _.breakpoints) _.breakpoints.hasOwnProperty(breakpoint) && (_.originalSettings.mobileFirst === !1 ? respondToWidth < _.breakpoints[breakpoint] && (targetBreakpoint = _.breakpoints[breakpoint]) : respondToWidth > _.breakpoints[breakpoint] && (targetBreakpoint = _.breakpoints[breakpoint]));
            null !== targetBreakpoint ? null !== _.activeBreakpoint ? targetBreakpoint !== _.activeBreakpoint && (_.activeBreakpoint = targetBreakpoint, 
            "unslick" === _.breakpointSettings[targetBreakpoint] ? _.unslick() : (_.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]), 
            initial === !0 && (_.currentSlide = _.options.initialSlide), _.refresh())) : (_.activeBreakpoint = targetBreakpoint, 
            "unslick" === _.breakpointSettings[targetBreakpoint] ? _.unslick() : (_.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]), 
            initial === !0 && (_.currentSlide = _.options.initialSlide), _.refresh())) : null !== _.activeBreakpoint && (_.activeBreakpoint = null, 
            _.options = _.originalSettings, initial === !0 && (_.currentSlide = _.options.initialSlide), 
            _.refresh());
        }
    }, Slick.prototype.changeSlide = function(event, dontAnimate) {
        var indexOffset, slideOffset, unevenOffset, _ = this, $target = $(event.target);
        switch ($target.is("a") && event.preventDefault(), unevenOffset = _.slideCount % _.options.slidesToScroll !== 0, 
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll, 
        event.data.message) {
          case "previous":
            slideOffset = 0 === indexOffset ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset, 
            _.slideCount > _.options.slidesToShow && _.slideHandler(_.currentSlide - slideOffset, !1, dontAnimate);
            break;

          case "next":
            slideOffset = 0 === indexOffset ? _.options.slidesToScroll : indexOffset, _.slideCount > _.options.slidesToShow && _.slideHandler(_.currentSlide + slideOffset, !1, dontAnimate);
            break;

          case "index":
            var index = 0 === event.data.index ? 0 : event.data.index || $(event.target).parent().index() * _.options.slidesToScroll;
            _.slideHandler(_.checkNavigable(index), !1, dontAnimate);
            break;

          default:
            return;
        }
    }, Slick.prototype.checkNavigable = function(index) {
        var navigables, prevNavigable, _ = this;
        if (navigables = _.getNavigableIndexes(), prevNavigable = 0, index > navigables[navigables.length - 1]) index = navigables[navigables.length - 1]; else for (var n in navigables) {
            if (index < navigables[n]) {
                index = prevNavigable;
                break;
            }
            prevNavigable = navigables[n];
        }
        return index;
    }, Slick.prototype.cleanUpEvents = function() {
        var _ = this;
        _.options.dots === !0 && _.slideCount > _.options.slidesToShow && $("li", _.$dots).off("click.slick", _.changeSlide), 
        _.options.dots === !0 && _.options.pauseOnDotsHover === !0 && _.options.autoplay === !0 && $("li", _.$dots).off("mouseenter.slick", _.setPaused.bind(_, !0)).off("mouseleave.slick", _.setPaused.bind(_, !1)), 
        _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.$prevArrow && _.$prevArrow.off("click.slick", _.changeSlide), 
        _.$nextArrow && _.$nextArrow.off("click.slick", _.changeSlide)), _.$list.off("touchstart.slick mousedown.slick", _.swipeHandler), 
        _.$list.off("touchmove.slick mousemove.slick", _.swipeHandler), _.$list.off("touchend.slick mouseup.slick", _.swipeHandler), 
        _.$list.off("touchcancel.slick mouseleave.slick", _.swipeHandler), _.$list.off("click.slick", _.clickHandler), 
        _.options.autoplay === !0 && $(document).off(_.visibilityChange, _.visibility), 
        _.$list.off("mouseenter.slick", _.setPaused.bind(_, !0)), _.$list.off("mouseleave.slick", _.setPaused.bind(_, !1)), 
        _.options.accessibility === !0 && _.$list.off("keydown.slick", _.keyHandler), _.options.focusOnSelect === !0 && $(_.$slideTrack).children().off("click.slick", _.selectHandler), 
        $(window).off("orientationchange.slick.slick-" + _.instanceUid, _.orientationChange), 
        $(window).off("resize.slick.slick-" + _.instanceUid, _.resize), $("[draggable!=true]", _.$slideTrack).off("dragstart", _.preventDefault), 
        $(window).off("load.slick.slick-" + _.instanceUid, _.setPosition), $(document).off("ready.slick.slick-" + _.instanceUid, _.setPosition);
    }, Slick.prototype.cleanUpRows = function() {
        var originalSlides, _ = this;
        _.options.rows > 1 && (originalSlides = _.$slides.children().children(), originalSlides.removeAttr("style"), 
        _.$slider.html(originalSlides));
    }, Slick.prototype.clickHandler = function(event) {
        var _ = this;
        _.shouldClick === !1 && (event.stopImmediatePropagation(), event.stopPropagation(), 
        event.preventDefault());
    }, Slick.prototype.destroy = function() {
        var _ = this;
        _.autoPlayClear(), _.touchObject = {}, _.cleanUpEvents(), $(".slick-cloned", _.$slider).remove(), 
        _.$dots && _.$dots.remove(), _.$prevArrow && "object" != typeof _.options.prevArrow && _.$prevArrow.remove(), 
        _.$nextArrow && "object" != typeof _.options.nextArrow && _.$nextArrow.remove(), 
        _.$slides && (_.$slides.removeClass("slick-slide slick-active slick-center slick-visible").attr("aria-hidden", "true").removeAttr("data-slick-index").css({
            position: "",
            left: "",
            top: "",
            zIndex: "",
            opacity: "",
            width: ""
        }), _.$slider.html(_.$slides)), _.cleanUpRows(), _.$slider.removeClass("slick-slider"), 
        _.$slider.removeClass("slick-initialized");
    }, Slick.prototype.disableTransition = function(slide) {
        var _ = this, transition = {};
        transition[_.transitionType] = "", _.options.fade === !1 ? _.$slideTrack.css(transition) : _.$slides.eq(slide).css(transition);
    }, Slick.prototype.fadeSlide = function(slideIndex, callback) {
        var _ = this;
        _.cssTransitions === !1 ? (_.$slides.eq(slideIndex).css({
            zIndex: 1e3
        }), _.$slides.eq(slideIndex).animate({
            opacity: 1
        }, _.options.speed, _.options.easing, callback)) : (_.applyTransition(slideIndex), 
        _.$slides.eq(slideIndex).css({
            opacity: 1,
            zIndex: 1e3
        }), callback && setTimeout(function() {
            _.disableTransition(slideIndex), callback.call();
        }, _.options.speed));
    }, Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {
        var _ = this;
        null !== filter && (_.unload(), _.$slideTrack.children(this.options.slide).detach(), 
        _.$slidesCache.filter(filter).appendTo(_.$slideTrack), _.reinit());
    }, Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {
        var _ = this;
        return _.currentSlide;
    }, Slick.prototype.getDotCount = function() {
        var _ = this, breakPoint = 0, counter = 0, pagerQty = 0;
        if (_.options.infinite === !0) pagerQty = Math.ceil(_.slideCount / _.options.slidesToScroll); else if (_.options.centerMode === !0) pagerQty = _.slideCount; else for (;breakPoint < _.slideCount; ) ++pagerQty, 
        breakPoint = counter + _.options.slidesToShow, counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        return pagerQty - 1;
    }, Slick.prototype.getLeft = function(slideIndex) {
        var targetLeft, verticalHeight, targetSlide, _ = this, verticalOffset = 0;
        return _.slideOffset = 0, verticalHeight = _.$slides.first().outerHeight(), _.options.infinite === !0 ? (_.slideCount > _.options.slidesToShow && (_.slideOffset = _.slideWidth * _.options.slidesToShow * -1, 
        verticalOffset = verticalHeight * _.options.slidesToShow * -1), _.slideCount % _.options.slidesToScroll !== 0 && slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow && (slideIndex > _.slideCount ? (_.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1, 
        verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1) : (_.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1, 
        verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1))) : slideIndex + _.options.slidesToShow > _.slideCount && (_.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth, 
        verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight), 
        _.slideCount <= _.options.slidesToShow && (_.slideOffset = 0, verticalOffset = 0), 
        _.options.centerMode === !0 && _.options.infinite === !0 ? _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth : _.options.centerMode === !0 && (_.slideOffset = 0, 
        _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2)), targetLeft = _.options.vertical === !1 ? slideIndex * _.slideWidth * -1 + _.slideOffset : slideIndex * verticalHeight * -1 + verticalOffset, 
        _.options.variableWidth === !0 && (targetSlide = _.slideCount <= _.options.slidesToShow || _.options.infinite === !1 ? _.$slideTrack.children(".slick-slide").eq(slideIndex) : _.$slideTrack.children(".slick-slide").eq(slideIndex + _.options.slidesToShow), 
        targetLeft = targetSlide[0] ? -1 * targetSlide[0].offsetLeft : 0, _.options.centerMode === !0 && (targetSlide = _.options.infinite === !1 ? _.$slideTrack.children(".slick-slide").eq(slideIndex) : _.$slideTrack.children(".slick-slide").eq(slideIndex + _.options.slidesToShow + 1), 
        targetLeft = targetSlide[0] ? -1 * targetSlide[0].offsetLeft : 0, targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2)), 
        targetLeft;
    }, Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {
        var _ = this;
        return _.options[option];
    }, Slick.prototype.getNavigableIndexes = function() {
        var max, _ = this, breakPoint = 0, counter = 0, indexes = [];
        for (_.options.infinite === !1 ? (max = _.slideCount - _.options.slidesToShow + 1, 
        _.options.centerMode === !0 && (max = _.slideCount)) : (breakPoint = -1 * _.options.slidesToScroll, 
        counter = -1 * _.options.slidesToScroll, max = 2 * _.slideCount); max > breakPoint; ) indexes.push(breakPoint), 
        breakPoint = counter + _.options.slidesToScroll, counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        return indexes;
    }, Slick.prototype.getSlick = function() {
        return this;
    }, Slick.prototype.getSlideCount = function() {
        var slidesTraversed, swipedSlide, centerOffset, _ = this;
        return centerOffset = _.options.centerMode === !0 ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0, 
        _.options.swipeToSlide === !0 ? (_.$slideTrack.find(".slick-slide").each(function(index, slide) {
            return slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > -1 * _.swipeLeft ? (swipedSlide = slide, 
            !1) : void 0;
        }), slidesTraversed = Math.abs($(swipedSlide).attr("data-slick-index") - _.currentSlide) || 1) : _.options.slidesToScroll;
    }, Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {
        var _ = this;
        _.changeSlide({
            data: {
                message: "index",
                index: parseInt(slide)
            }
        }, dontAnimate);
    }, Slick.prototype.init = function() {
        var _ = this;
        $(_.$slider).hasClass("slick-initialized") || ($(_.$slider).addClass("slick-initialized"), 
        _.buildRows(), _.buildOut(), _.setProps(), _.startLoad(), _.loadSlider(), _.initializeEvents(), 
        _.updateArrows(), _.updateDots()), _.$slider.trigger("init", [ _ ]);
    }, Slick.prototype.initArrowEvents = function() {
        var _ = this;
        _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.$prevArrow.on("click.slick", {
            message: "previous"
        }, _.changeSlide), _.$nextArrow.on("click.slick", {
            message: "next"
        }, _.changeSlide));
    }, Slick.prototype.initDotEvents = function() {
        var _ = this;
        _.options.dots === !0 && _.slideCount > _.options.slidesToShow && $("li", _.$dots).on("click.slick", {
            message: "index"
        }, _.changeSlide), _.options.dots === !0 && _.options.pauseOnDotsHover === !0 && _.options.autoplay === !0 && $("li", _.$dots).on("mouseenter.slick", _.setPaused.bind(_, !0)).on("mouseleave.slick", _.setPaused.bind(_, !1));
    }, Slick.prototype.initializeEvents = function() {
        var _ = this;
        _.initArrowEvents(), _.initDotEvents(), _.$list.on("touchstart.slick mousedown.slick", {
            action: "start"
        }, _.swipeHandler), _.$list.on("touchmove.slick mousemove.slick", {
            action: "move"
        }, _.swipeHandler), _.$list.on("touchend.slick mouseup.slick", {
            action: "end"
        }, _.swipeHandler), _.$list.on("touchcancel.slick mouseleave.slick", {
            action: "end"
        }, _.swipeHandler), _.$list.on("click.slick", _.clickHandler), _.options.autoplay === !0 && $(document).on(_.visibilityChange, _.visibility.bind(_)), 
        _.$list.on("mouseenter.slick", _.setPaused.bind(_, !0)), _.$list.on("mouseleave.slick", _.setPaused.bind(_, !1)), 
        _.options.accessibility === !0 && _.$list.on("keydown.slick", _.keyHandler), _.options.focusOnSelect === !0 && $(_.$slideTrack).children().on("click.slick", _.selectHandler), 
        $(window).on("orientationchange.slick.slick-" + _.instanceUid, _.orientationChange.bind(_)), 
        $(window).on("resize.slick.slick-" + _.instanceUid, _.resize.bind(_)), $("[draggable!=true]", _.$slideTrack).on("dragstart", _.preventDefault), 
        $(window).on("load.slick.slick-" + _.instanceUid, _.setPosition), $(document).on("ready.slick.slick-" + _.instanceUid, _.setPosition);
    }, Slick.prototype.initUI = function() {
        var _ = this;
        _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.$prevArrow.show(), 
        _.$nextArrow.show()), _.options.dots === !0 && _.slideCount > _.options.slidesToShow && _.$dots.show(), 
        _.options.autoplay === !0 && _.autoPlay();
    }, Slick.prototype.keyHandler = function(event) {
        var _ = this;
        37 === event.keyCode && _.options.accessibility === !0 ? _.changeSlide({
            data: {
                message: "previous"
            }
        }) : 39 === event.keyCode && _.options.accessibility === !0 && _.changeSlide({
            data: {
                message: "next"
            }
        });
    }, Slick.prototype.lazyLoad = function() {
        function loadImages(imagesScope) {
            $("img[data-lazy]", imagesScope).each(function() {
                var image = $(this), imageSource = $(this).attr("data-lazy"), imageToLoad = document.createElement("img");
                imageToLoad.onload = function() {
                    image.animate({
                        opacity: 1
                    }, 200);
                }, imageToLoad.src = imageSource, image.css({
                    opacity: 0
                }).attr("src", imageSource).removeAttr("data-lazy").removeClass("slick-loading");
            });
        }
        var loadRange, cloneRange, rangeStart, rangeEnd, _ = this;
        _.options.centerMode === !0 ? _.options.infinite === !0 ? (rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1), 
        rangeEnd = rangeStart + _.options.slidesToShow + 2) : (rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1)), 
        rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide) : (rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide, 
        rangeEnd = rangeStart + _.options.slidesToShow, _.options.fade === !0 && (rangeStart > 0 && rangeStart--, 
        rangeEnd <= _.slideCount && rangeEnd++)), loadRange = _.$slider.find(".slick-slide").slice(rangeStart, rangeEnd), 
        loadImages(loadRange), _.slideCount <= _.options.slidesToShow ? (cloneRange = _.$slider.find(".slick-slide"), 
        loadImages(cloneRange)) : _.currentSlide >= _.slideCount - _.options.slidesToShow ? (cloneRange = _.$slider.find(".slick-cloned").slice(0, _.options.slidesToShow), 
        loadImages(cloneRange)) : 0 === _.currentSlide && (cloneRange = _.$slider.find(".slick-cloned").slice(-1 * _.options.slidesToShow), 
        loadImages(cloneRange));
    }, Slick.prototype.loadSlider = function() {
        var _ = this;
        _.setPosition(), _.$slideTrack.css({
            opacity: 1
        }), _.$slider.removeClass("slick-loading"), _.initUI(), "progressive" === _.options.lazyLoad && _.progressiveLazyLoad();
    }, Slick.prototype.next = Slick.prototype.slickNext = function() {
        var _ = this;
        _.changeSlide({
            data: {
                message: "next"
            }
        });
    }, Slick.prototype.orientationChange = function() {
        var _ = this;
        _.checkResponsive(), _.setPosition();
    }, Slick.prototype.pause = Slick.prototype.slickPause = function() {
        var _ = this;
        _.autoPlayClear(), _.paused = !0;
    }, Slick.prototype.play = Slick.prototype.slickPlay = function() {
        var _ = this;
        _.paused = !1, _.autoPlay();
    }, Slick.prototype.postSlide = function(index) {
        var _ = this;
        _.$slider.trigger("afterChange", [ _, index ]), _.animating = !1, _.setPosition(), 
        _.swipeLeft = null, _.options.autoplay === !0 && _.paused === !1 && _.autoPlay();
    }, Slick.prototype.prev = Slick.prototype.slickPrev = function() {
        var _ = this;
        _.changeSlide({
            data: {
                message: "previous"
            }
        });
    }, Slick.prototype.preventDefault = function(e) {
        e.preventDefault();
    }, Slick.prototype.progressiveLazyLoad = function() {
        var imgCount, targetImage, _ = this;
        imgCount = $("img[data-lazy]", _.$slider).length, imgCount > 0 && (targetImage = $("img[data-lazy]", _.$slider).first(), 
        targetImage.attr("src", targetImage.attr("data-lazy")).removeClass("slick-loading").load(function() {
            targetImage.removeAttr("data-lazy"), _.progressiveLazyLoad(), _.options.adaptiveHeight === !0 && _.setPosition();
        }).error(function() {
            targetImage.removeAttr("data-lazy"), _.progressiveLazyLoad();
        }));
    }, Slick.prototype.refresh = function() {
        var _ = this, currentSlide = _.currentSlide;
        _.destroy(), $.extend(_, _.initials), _.init(), _.changeSlide({
            data: {
                message: "index",
                index: currentSlide
            }
        }, !1);
    }, Slick.prototype.reinit = function() {
        var _ = this;
        _.$slides = _.$slideTrack.children(_.options.slide).addClass("slick-slide"), _.slideCount = _.$slides.length, 
        _.currentSlide >= _.slideCount && 0 !== _.currentSlide && (_.currentSlide = _.currentSlide - _.options.slidesToScroll), 
        _.slideCount <= _.options.slidesToShow && (_.currentSlide = 0), _.setProps(), _.setupInfinite(), 
        _.buildArrows(), _.updateArrows(), _.initArrowEvents(), _.buildDots(), _.updateDots(), 
        _.initDotEvents(), _.options.focusOnSelect === !0 && $(_.$slideTrack).children().on("click.slick", _.selectHandler), 
        _.setSlideClasses(0), _.setPosition(), _.$slider.trigger("reInit", [ _ ]);
    }, Slick.prototype.resize = function() {
        var _ = this;
        $(window).width() !== _.windowWidth && (clearTimeout(_.windowDelay), _.windowDelay = window.setTimeout(function() {
            _.windowWidth = $(window).width(), _.checkResponsive(), _.setPosition();
        }, 50));
    }, Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {
        var _ = this;
        return "boolean" == typeof index ? (removeBefore = index, index = removeBefore === !0 ? 0 : _.slideCount - 1) : index = removeBefore === !0 ? --index : index, 
        _.slideCount < 1 || 0 > index || index > _.slideCount - 1 ? !1 : (_.unload(), removeAll === !0 ? _.$slideTrack.children().remove() : _.$slideTrack.children(this.options.slide).eq(index).remove(), 
        _.$slides = _.$slideTrack.children(this.options.slide), _.$slideTrack.children(this.options.slide).detach(), 
        _.$slideTrack.append(_.$slides), _.$slidesCache = _.$slides, void _.reinit());
    }, Slick.prototype.setCSS = function(position) {
        var x, y, _ = this, positionProps = {};
        _.options.rtl === !0 && (position = -position), x = "left" == _.positionProp ? Math.ceil(position) + "px" : "0px", 
        y = "top" == _.positionProp ? Math.ceil(position) + "px" : "0px", positionProps[_.positionProp] = position, 
        _.transformsEnabled === !1 ? _.$slideTrack.css(positionProps) : (positionProps = {}, 
        _.cssTransitions === !1 ? (positionProps[_.animType] = "translate(" + x + ", " + y + ")", 
        _.$slideTrack.css(positionProps)) : (positionProps[_.animType] = "translate3d(" + x + ", " + y + ", 0px)", 
        _.$slideTrack.css(positionProps)));
    }, Slick.prototype.setDimensions = function() {
        var _ = this;
        _.options.vertical === !1 ? _.options.centerMode === !0 && _.$list.css({
            padding: "0px " + _.options.centerPadding
        }) : (_.$list.height(_.$slides.first().outerHeight(!0) * _.options.slidesToShow), 
        _.options.centerMode === !0 && _.$list.css({
            padding: _.options.centerPadding + " 0px"
        })), _.listWidth = _.$list.width(), _.listHeight = _.$list.height(), _.options.vertical === !1 && _.options.variableWidth === !1 ? (_.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow), 
        _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children(".slick-slide").length))) : _.options.variableWidth === !0 ? _.$slideTrack.width(5e3 * _.slideCount) : (_.slideWidth = Math.ceil(_.listWidth), 
        _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(!0) * _.$slideTrack.children(".slick-slide").length)));
        var offset = _.$slides.first().outerWidth(!0) - _.$slides.first().width();
        _.options.variableWidth === !1 && _.$slideTrack.children(".slick-slide").width(_.slideWidth - offset);
    }, Slick.prototype.setFade = function() {
        var targetLeft, _ = this;
        _.$slides.each(function(index, element) {
            targetLeft = _.slideWidth * index * -1, _.options.rtl === !0 ? $(element).css({
                position: "relative",
                right: targetLeft,
                top: 0,
                zIndex: 800,
                opacity: 0
            }) : $(element).css({
                position: "relative",
                left: targetLeft,
                top: 0,
                zIndex: 800,
                opacity: 0
            });
        }), _.$slides.eq(_.currentSlide).css({
            zIndex: 900,
            opacity: 1
        });
    }, Slick.prototype.setHeight = function() {
        var _ = this;
        if (1 === _.options.slidesToShow && _.options.adaptiveHeight === !0 && _.options.vertical === !1) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(!0);
            _.$list.css("height", targetHeight);
        }
    }, Slick.prototype.setOption = Slick.prototype.slickSetOption = function(option, value, refresh) {
        var _ = this;
        _.options[option] = value, refresh === !0 && (_.unload(), _.reinit());
    }, Slick.prototype.setPosition = function() {
        var _ = this;
        _.setDimensions(), _.setHeight(), _.options.fade === !1 ? _.setCSS(_.getLeft(_.currentSlide)) : _.setFade(), 
        _.$slider.trigger("setPosition", [ _ ]);
    }, Slick.prototype.setProps = function() {
        var _ = this, bodyStyle = document.body.style;
        _.positionProp = _.options.vertical === !0 ? "top" : "left", "top" === _.positionProp ? _.$slider.addClass("slick-vertical") : _.$slider.removeClass("slick-vertical"), 
        (void 0 !== bodyStyle.WebkitTransition || void 0 !== bodyStyle.MozTransition || void 0 !== bodyStyle.msTransition) && _.options.useCSS === !0 && (_.cssTransitions = !0), 
        void 0 !== bodyStyle.OTransform && (_.animType = "OTransform", _.transformType = "-o-transform", 
        _.transitionType = "OTransition", void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.webkitPerspective && (_.animType = !1)), 
        void 0 !== bodyStyle.MozTransform && (_.animType = "MozTransform", _.transformType = "-moz-transform", 
        _.transitionType = "MozTransition", void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.MozPerspective && (_.animType = !1)), 
        void 0 !== bodyStyle.webkitTransform && (_.animType = "webkitTransform", _.transformType = "-webkit-transform", 
        _.transitionType = "webkitTransition", void 0 === bodyStyle.perspectiveProperty && void 0 === bodyStyle.webkitPerspective && (_.animType = !1)), 
        void 0 !== bodyStyle.msTransform && (_.animType = "msTransform", _.transformType = "-ms-transform", 
        _.transitionType = "msTransition", void 0 === bodyStyle.msTransform && (_.animType = !1)), 
        void 0 !== bodyStyle.transform && _.animType !== !1 && (_.animType = "transform", 
        _.transformType = "transform", _.transitionType = "transition"), _.transformsEnabled = null !== _.animType && _.animType !== !1;
    }, Slick.prototype.setSlideClasses = function(index) {
        var centerOffset, allSlides, indexOffset, remainder, _ = this;
        _.$slider.find(".slick-slide").removeClass("slick-active").attr("aria-hidden", "true").removeClass("slick-center"), 
        allSlides = _.$slider.find(".slick-slide"), _.options.centerMode === !0 ? (centerOffset = Math.floor(_.options.slidesToShow / 2), 
        _.options.infinite === !0 && (index >= centerOffset && index <= _.slideCount - 1 - centerOffset ? _.$slides.slice(index - centerOffset, index + centerOffset + 1).addClass("slick-active").attr("aria-hidden", "false") : (indexOffset = _.options.slidesToShow + index, 
        allSlides.slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2).addClass("slick-active").attr("aria-hidden", "false")), 
        0 === index ? allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass("slick-center") : index === _.slideCount - 1 && allSlides.eq(_.options.slidesToShow).addClass("slick-center")), 
        _.$slides.eq(index).addClass("slick-center")) : index >= 0 && index <= _.slideCount - _.options.slidesToShow ? _.$slides.slice(index, index + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : allSlides.length <= _.options.slidesToShow ? allSlides.addClass("slick-active").attr("aria-hidden", "false") : (remainder = _.slideCount % _.options.slidesToShow, 
        indexOffset = _.options.infinite === !0 ? _.options.slidesToShow + index : index, 
        _.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow ? allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass("slick-active").attr("aria-hidden", "false") : allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false")), 
        "ondemand" === _.options.lazyLoad && _.lazyLoad();
    }, Slick.prototype.setupInfinite = function() {
        var i, slideIndex, infiniteCount, _ = this;
        if (_.options.fade === !0 && (_.options.centerMode = !1), _.options.infinite === !0 && _.options.fade === !1 && (slideIndex = null, 
        _.slideCount > _.options.slidesToShow)) {
            for (infiniteCount = _.options.centerMode === !0 ? _.options.slidesToShow + 1 : _.options.slidesToShow, 
            i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) slideIndex = i - 1, 
            $(_.$slides[slideIndex]).clone(!0).attr("id", "").attr("data-slick-index", slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass("slick-cloned");
            for (i = 0; infiniteCount > i; i += 1) slideIndex = i, $(_.$slides[slideIndex]).clone(!0).attr("id", "").attr("data-slick-index", slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass("slick-cloned");
            _.$slideTrack.find(".slick-cloned").find("[id]").each(function() {
                $(this).attr("id", "");
            });
        }
    }, Slick.prototype.setPaused = function(paused) {
        var _ = this;
        _.options.autoplay === !0 && _.options.pauseOnHover === !0 && (_.paused = paused, 
        _.autoPlayClear());
    }, Slick.prototype.selectHandler = function(event) {
        var _ = this, targetElement = $(event.target).is(".slick-slide") ? $(event.target) : $(event.target).parents(".slick-slide"), index = parseInt(targetElement.attr("data-slick-index"));
        return index || (index = 0), _.slideCount <= _.options.slidesToShow ? (_.$slider.find(".slick-slide").removeClass("slick-active").attr("aria-hidden", "true"), 
        _.$slides.eq(index).addClass("slick-active").attr("aria-hidden", "false"), _.options.centerMode === !0 && (_.$slider.find(".slick-slide").removeClass("slick-center"), 
        _.$slides.eq(index).addClass("slick-center")), void _.asNavFor(index)) : void _.slideHandler(index);
    }, Slick.prototype.slideHandler = function(index, sync, dontAnimate) {
        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null, _ = this;
        return sync = sync || !1, _.animating === !0 && _.options.waitForAnimate === !0 || _.options.fade === !0 && _.currentSlide === index || _.slideCount <= _.options.slidesToShow ? void 0 : (sync === !1 && _.asNavFor(index), 
        targetSlide = index, targetLeft = _.getLeft(targetSlide), slideLeft = _.getLeft(_.currentSlide), 
        _.currentLeft = null === _.swipeLeft ? slideLeft : _.swipeLeft, _.options.infinite === !1 && _.options.centerMode === !1 && (0 > index || index > _.getDotCount() * _.options.slidesToScroll) ? void (_.options.fade === !1 && (targetSlide = _.currentSlide, 
        dontAnimate !== !0 ? _.animateSlide(slideLeft, function() {
            _.postSlide(targetSlide);
        }) : _.postSlide(targetSlide))) : _.options.infinite === !1 && _.options.centerMode === !0 && (0 > index || index > _.slideCount - _.options.slidesToScroll) ? void (_.options.fade === !1 && (targetSlide = _.currentSlide, 
        dontAnimate !== !0 ? _.animateSlide(slideLeft, function() {
            _.postSlide(targetSlide);
        }) : _.postSlide(targetSlide))) : (_.options.autoplay === !0 && clearInterval(_.autoPlayTimer), 
        animSlide = 0 > targetSlide ? _.slideCount % _.options.slidesToScroll !== 0 ? _.slideCount - _.slideCount % _.options.slidesToScroll : _.slideCount + targetSlide : targetSlide >= _.slideCount ? _.slideCount % _.options.slidesToScroll !== 0 ? 0 : targetSlide - _.slideCount : targetSlide, 
        _.animating = !0, _.$slider.trigger("beforeChange", [ _, _.currentSlide, animSlide ]), 
        oldSlide = _.currentSlide, _.currentSlide = animSlide, _.setSlideClasses(_.currentSlide), 
        _.updateDots(), _.updateArrows(), _.options.fade === !0 ? (dontAnimate !== !0 ? _.fadeSlide(animSlide, function() {
            _.postSlide(animSlide);
        }) : _.postSlide(animSlide), void _.animateHeight()) : void (dontAnimate !== !0 ? _.animateSlide(targetLeft, function() {
            _.postSlide(animSlide);
        }) : _.postSlide(animSlide))));
    }, Slick.prototype.startLoad = function() {
        var _ = this;
        _.options.arrows === !0 && _.slideCount > _.options.slidesToShow && (_.$prevArrow.hide(), 
        _.$nextArrow.hide()), _.options.dots === !0 && _.slideCount > _.options.slidesToShow && _.$dots.hide(), 
        _.$slider.addClass("slick-loading");
    }, Slick.prototype.swipeDirection = function() {
        var xDist, yDist, r, swipeAngle, _ = this;
        return xDist = _.touchObject.startX - _.touchObject.curX, yDist = _.touchObject.startY - _.touchObject.curY, 
        r = Math.atan2(yDist, xDist), swipeAngle = Math.round(180 * r / Math.PI), 0 > swipeAngle && (swipeAngle = 360 - Math.abs(swipeAngle)), 
        45 >= swipeAngle && swipeAngle >= 0 ? _.options.rtl === !1 ? "left" : "right" : 360 >= swipeAngle && swipeAngle >= 315 ? _.options.rtl === !1 ? "left" : "right" : swipeAngle >= 135 && 225 >= swipeAngle ? _.options.rtl === !1 ? "right" : "left" : _.options.verticalSwiping === !0 ? swipeAngle >= 35 && 135 >= swipeAngle ? "left" : "right" : "vertical";
    }, Slick.prototype.swipeEnd = function(event) {
        var slideCount, _ = this;
        if (_.dragging = !1, _.shouldClick = _.touchObject.swipeLength > 10 ? !1 : !0, void 0 === _.touchObject.curX) return !1;
        if (_.touchObject.edgeHit === !0 && _.$slider.trigger("edge", [ _, _.swipeDirection() ]), 
        _.touchObject.swipeLength >= _.touchObject.minSwipe) switch (_.swipeDirection()) {
          case "left":
            slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount(), 
            _.slideHandler(slideCount), _.currentDirection = 0, _.touchObject = {}, _.$slider.trigger("swipe", [ _, "left" ]);
            break;

          case "right":
            slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount(), 
            _.slideHandler(slideCount), _.currentDirection = 1, _.touchObject = {}, _.$slider.trigger("swipe", [ _, "right" ]);
        } else _.touchObject.startX !== _.touchObject.curX && (_.slideHandler(_.currentSlide), 
        _.touchObject = {});
    }, Slick.prototype.swipeHandler = function(event) {
        var _ = this;
        if (!(_.options.swipe === !1 || "ontouchend" in document && _.options.swipe === !1 || _.options.draggable === !1 && -1 !== event.type.indexOf("mouse"))) switch (_.touchObject.fingerCount = event.originalEvent && void 0 !== event.originalEvent.touches ? event.originalEvent.touches.length : 1, 
        _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold, _.options.verticalSwiping === !0 && (_.touchObject.minSwipe = _.listHeight / _.options.touchThreshold), 
        event.data.action) {
          case "start":
            _.swipeStart(event);
            break;

          case "move":
            _.swipeMove(event);
            break;

          case "end":
            _.swipeEnd(event);
        }
    }, Slick.prototype.swipeMove = function(event) {
        var curLeft, swipeDirection, swipeLength, positionOffset, touches, _ = this;
        return touches = void 0 !== event.originalEvent ? event.originalEvent.touches : null, 
        !_.dragging || touches && 1 !== touches.length ? !1 : (curLeft = _.getLeft(_.currentSlide), 
        _.touchObject.curX = void 0 !== touches ? touches[0].pageX : event.clientX, _.touchObject.curY = void 0 !== touches ? touches[0].pageY : event.clientY, 
        _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2))), 
        _.options.verticalSwiping === !0 && (_.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)))), 
        swipeDirection = _.swipeDirection(), "vertical" !== swipeDirection ? (void 0 !== event.originalEvent && _.touchObject.swipeLength > 4 && event.preventDefault(), 
        positionOffset = (_.options.rtl === !1 ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1), 
        _.options.verticalSwiping === !0 && (positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1), 
        swipeLength = _.touchObject.swipeLength, _.touchObject.edgeHit = !1, _.options.infinite === !1 && (0 === _.currentSlide && "right" === swipeDirection || _.currentSlide >= _.getDotCount() && "left" === swipeDirection) && (swipeLength = _.touchObject.swipeLength * _.options.edgeFriction, 
        _.touchObject.edgeHit = !0), _.options.vertical === !1 ? _.swipeLeft = curLeft + swipeLength * positionOffset : _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset, 
        _.options.verticalSwiping === !0 && (_.swipeLeft = curLeft + swipeLength * positionOffset), 
        _.options.fade === !0 || _.options.touchMove === !1 ? !1 : _.animating === !0 ? (_.swipeLeft = null, 
        !1) : void _.setCSS(_.swipeLeft)) : void 0);
    }, Slick.prototype.swipeStart = function(event) {
        var touches, _ = this;
        return 1 !== _.touchObject.fingerCount || _.slideCount <= _.options.slidesToShow ? (_.touchObject = {}, 
        !1) : (void 0 !== event.originalEvent && void 0 !== event.originalEvent.touches && (touches = event.originalEvent.touches[0]), 
        _.touchObject.startX = _.touchObject.curX = void 0 !== touches ? touches.pageX : event.clientX, 
        _.touchObject.startY = _.touchObject.curY = void 0 !== touches ? touches.pageY : event.clientY, 
        void (_.dragging = !0));
    }, Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {
        var _ = this;
        null !== _.$slidesCache && (_.unload(), _.$slideTrack.children(this.options.slide).detach(), 
        _.$slidesCache.appendTo(_.$slideTrack), _.reinit());
    }, Slick.prototype.unload = function() {
        var _ = this;
        $(".slick-cloned", _.$slider).remove(), _.$dots && _.$dots.remove(), _.$prevArrow && "object" != typeof _.options.prevArrow && _.$prevArrow.remove(), 
        _.$nextArrow && "object" != typeof _.options.nextArrow && _.$nextArrow.remove(), 
        _.$slides.removeClass("slick-slide slick-active slick-visible").attr("aria-hidden", "true").css("width", "");
    }, Slick.prototype.unslick = function() {
        var _ = this;
        _.destroy();
    }, Slick.prototype.updateArrows = function() {
        var centerOffset, _ = this;
        centerOffset = Math.floor(_.options.slidesToShow / 2), _.options.arrows === !0 && _.options.infinite !== !0 && _.slideCount > _.options.slidesToShow && (_.$prevArrow.removeClass("slick-disabled"), 
        _.$nextArrow.removeClass("slick-disabled"), 0 === _.currentSlide ? (_.$prevArrow.addClass("slick-disabled"), 
        _.$nextArrow.removeClass("slick-disabled")) : _.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === !1 ? (_.$nextArrow.addClass("slick-disabled"), 
        _.$prevArrow.removeClass("slick-disabled")) : _.currentSlide >= _.slideCount - 1 && _.options.centerMode === !0 && (_.$nextArrow.addClass("slick-disabled"), 
        _.$prevArrow.removeClass("slick-disabled")));
    }, Slick.prototype.updateDots = function() {
        var _ = this;
        null !== _.$dots && (_.$dots.find("li").removeClass("slick-active").attr("aria-hidden", "true"), 
        _.$dots.find("li").eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden", "false"));
    }, Slick.prototype.visibility = function() {
        var _ = this;
        document[_.hidden] ? (_.paused = !0, _.autoPlayClear()) : (_.paused = !1, _.autoPlay());
    }, $.fn.slick = function() {
        var ret, _ = this, opt = arguments[0], args = Array.prototype.slice.call(arguments, 1), l = _.length, i = 0;
        for (i; l > i; i++) if ("object" == typeof opt || "undefined" == typeof opt ? _[i].slick = new Slick(_[i], opt) : ret = _[i].slick[opt].apply(_[i].slick, args), 
        "undefined" != typeof ret) return ret;
        return _;
    };
}), function(window, $) {
    $.fn.responsiveArrowDropdown = function(options) {
        $.extend({
            triggerSelector: ""
        }, options);
        return this.each(function(id, el) {
            var $trigger = $(options.triggerSelector), $this = $(el);
            $this.wrap('<div class="rad-wrapper" style="display: none"></div>');
            var $dropdown = $this.closest(".rad-wrapper");
            $dropdown.prepend('<div class="rad-arrow-holder"></div>');
            var $arrowHolder = $dropdown.children(".rad-arrow-holder");
            $(window).resize(function(e) {
                if ($trigger.hasClass("open")) {
                    console.log($this), console.log($trigger.attr("id")), $dropdown.css("top", $trigger.position().top + $trigger.innerHeight() + "px");
                    var thisPageCenter = $trigger.offset().left + $trigger.innerWidth() / 2, dropdownParentPageLeft = ($trigger.position().left + $trigger.innerWidth() / 2, 
                    $dropdown.parent().offset().left), dropdownPageLeft = $dropdown.offset().left, dropdownPageRight = dropdownPageLeft + $dropdown.innerWidth(), windowWidth = $(window).width(), dropdownParentContainerLeftDistance = ($dropdown.parent().position().left, 
                    dropdownParentPageLeft - 0);
                    if ($(window).width() > 420) {
                        $dropdown.css("min-width", "260px"), $dropdown.css("width", "auto"), $dropdown.css("left", "auto"), 
                        $dropdown.children().css("padding-left", "0px"), $dropdown.children().css("padding-right", "0px");
                        var leftMargin = thisPageCenter - dropdownParentContainerLeftDistance - $dropdown.innerWidth() / 2;
                        $dropdown.css("margin-left", leftMargin + "px"), dropdownPageLeft = $dropdown.offset().left, 
                        dropdownPageRight = dropdownPageLeft + $dropdown.innerWidth(), 0 > dropdownPageLeft + leftMargin ? (console.log("ADJUSTING MARGIN L: "), 
                        console.log("old margin: " + leftMargin), console.log("dropdown page left: " + dropdownPageLeft), 
                        leftMargin = 0, console.log("new margin: " + leftMargin)) : dropdownPageRight > windowWidth && (console.log("ADJUSTING MARGIN R: "), 
                        console.log("old margin: " + leftMargin), console.log("dropdown width: " + $dropdown.width()), 
                        console.log("dropdown page right: " + dropdownPageRight), console.log("window width: " + windowWidth), 
                        leftMargin = windowWidth - dropdownPageRight + leftMargin, console.log("new margin: " + leftMargin)), 
                        $dropdown.css("margin-left", leftMargin + "px");
                        var dropdownPageCenter = $dropdown.offset().left + $dropdown.innerWidth() / 2;
                        dropdownPageCenter != thisPageCenter ? (console.log("ADJUSTING ARROW: "), console.log("triggerCenter: " + thisPageCenter), 
                        console.log("dropdownCenter: " + dropdownPageCenter), $arrowHolder.css("margin-left", 2 * (thisPageCenter - dropdownPageCenter) + "px")) : thisPageCenter > dropdownPageCenter ? (console.log("ADJUSTING ARROW: "), 
                        console.log("triggerCenter: " + thisPageCenter), console.log("dropdownCenter: " + dropdownPageCenter), 
                        $arrowHolder.css("margin-left", 2 * (thisPageCenter - dropdownPageCenter) + "px")) : $arrowHolder.css("margin-left", "0");
                    } else {
                        var displacementLeft = thisPageCenter, displacementRight = $(window).width() - thisPageCenter;
                        $arrowHolder.css("margin-left", "0"), displacementLeft >= displacementRight ? ($dropdown.css("width", 2 * displacementLeft + "px"), 
                        $dropdown.css("left", "auto"), $dropdown.css("margin-left", -dropdownParentContainerLeftDistance + "px"), 
                        $dropdown.children().css("padding-left", "0px"), $dropdown.children().css("padding-right", displacementLeft - displacementRight + "px")) : ($dropdown.css("width", 2 * displacementRight + "px"), 
                        $dropdown.css("left", "auto"), $dropdown.css("margin-left", -(displacementRight - displacementLeft + dropdownParentContainerLeftDistance) + "px"), 
                        $dropdown.children().css("padding-left", displacementRight - displacementLeft + "px"), 
                        $dropdown.children().css("padding-right", "0px"));
                    }
                }
            }), $trigger.click(function(e) {
                e.preventDefault(), $dropdown.toggle(), $trigger.toggleClass("open"), $(window).resize();
            });
        });
    };
}(window, jQuery), function($) {
    $.fn.randomizeInGroups = function(parentSelector, childSelector) {
        return this.each(function() {
            var $this = $(this), parentElems = $this.find(parentSelector), childElems = $this.find(childSelector), parentCount = parentElems.length, childCount = childElems.length, numPerParent = Math.round(childCount / parentCount);
            childElems.sort(function() {
                return Math.round(Math.random()) - .5;
            }), $this.remove(childSelector);
            for (var counter = 0, i = 0; parentCount > i; i++) for (j = 0; j < numPerParent && !(counter >= childCount); j++) $(parentElems[i]).append(childElems[counter++]);
        });
    }, jQuery.fn.triggerEmailForm = function(eventId, eventTimestamp) {
        return jQuery('input[id*="_EventId"]').val(eventId), jQuery('input[id*="_EventTimestamp"]').val(eventTimestamp), 
        jQuery("#p_p_id_1_WAR_EmailFormportlet_").dialog({
            modal: !0,
            width: "360px",
            dialogClass: "event-email-popover"
        }), jQuery(".event-email-popover").css({
            position: "absolute"
        }), jQuery("#p_p_id_1_WAR_EmailFormportlet_").dialog({
            modal: !0,
            width: "360px",
            dialogClass: "event-email-popover"
        }), jQuery(".event-email-popover").css({
            position: "absolute"
        }), jQuery(".ui-dialog-titlebar-close").focus(), !1;
    };
}(jQuery), function($) {
    var $primary = ($(".secondary"), $(".primary"));
    $(function() {
        function animateTo(target) {
            return $("html,body").animate({
                scrollTop: $(target).offset().top
            }, 800), this;
        }
        var typeAheadSource, typeAheadSelect;
        $("body").hasClass("homepage") || $(".eventslayout").length ? $("#footer .row-fluid").children().removeClass("span9 pull-right") : $("#footer").on({
            mobileSize: function() {
                $("#footer .row-fluid").children().removeClass("span9 pull-right");
            },
            desktopSize: function() {
                $("#footer .row-fluid").children().addClass("span9 pull-right");
            }
        }), $(".portlet-boundary").on({
            mobileSize: function() {
                $(".portlet-boundary.constrain").removeClass("constrain").addClass("no-constrain");
            },
            desktopSize: function() {
                $(".portlet-boundary.no-constrain").addClass("constrain").removeClass("no-constrain");
            }
        }), $(".slider-featuring .slide").on({
            mobileSize: function() {
                $(this).find(".mobile-fade").show();
            },
            desktopSize: function() {
                $(this).find(".mobile-fade").hide();
            }
        }), $breadcrumbs = $(this).find(".portlet-breadcrumb").clone(!0), $(".primary").find(".portlet-dropzone").prepend($breadcrumbs);
        var eventLink = $(".header-main .events").clone(!0);
        $(".mega-menu.items").append(eventLink.addClass("root-cat-li")), desktopSearchItem = $("#_lookaheadsearch_WAR_CustomPortletsportlet_fm"), 
        mobileSearchItem = $("<li />", {
            "class": "root-cat-li search"
        }).append(desktopSearchItem.clone(!0)), $(".mega-menu.items").append(mobileSearchItem);
        jQuery(".taxonomynav-portlet").offset().top;
        mobileSearchItem.find(".look-ahead-keyword").focus(function(e) {
            $(e.target);
            jQuery(window).width() <= 768 && setTimeout(function() {
                window.scrollTo(0, 0), document.body.scrollTop = 0;
                var metaData = jQuery(".header-main"), metaDataHeight = metaData.height(), newScrollTop = $("ul.mega-menu").children("li.search").offset().top - metaDataHeight;
                console.log("newScrollTop:" + newScrollTop);
                var curScrollTop = jQuery(".nav-main").offset().top;
                if (console.log("curScrollTop:" + curScrollTop), curScrollTop != newScrollTop) {
                    var duration = 2 * Math.abs(newScrollTop - curScrollTop);
                    duration > 500 && (duration = 500), jQuery(".nav-main").animate({
                        top: -newScrollTop + "px"
                    }, duration);
                }
            }, 0);
        }).blur(function(e) {
            var eventTarget = $(e.target);
            if (jQuery(window).width() <= 768) {
                var metaData = jQuery(".header-main"), metaDataHeight = -6;
                "fixed" != metaData.css("position") && (metaDataHeight = metaData.height());
                var curScrollTop = eventTarget.offset().top;
                console.log("curScrollTop:" + curScrollTop);
                var newScrollTop = 0;
                if (console.log("newScrollTop:" + newScrollTop), curScrollTop != newScrollTop) {
                    var duration = 2 * Math.abs(newScrollTop - curScrollTop);
                    duration > 500 && (duration = 500), jQuery(".nav-main").animate({
                        top: newScrollTop + "px"
                    }, duration);
                }
            }
        }), $(window).width() <= 768 ? mobileSearchItem.find(".look-ahead-keyword").attr("placeholder", "Search").autocomplete({
            minLength: 2,
            source: typeAheadSource,
            select: typeAheadSelect,
            position: {
                my: "center top+10",
                at: "center bottom",
                collision: "none"
            }
        }) : desktopSearchItem.find(".look-ahead-keyword").autocomplete({
            minLength: 2,
            source: typeAheadSource,
            select: typeAheadSelect
        }), $(".meta-data .share-this-block").on({
            mobileSize: function() {
                $(this).removeClass("span2");
            },
            desktopSize: function() {
                $(this).addClass("span2");
            }
        }), $(".secondary .nav-menu li").length ? $(".secondary .menu-heading").show() : $(".secondary .menu-heading").hide(), 
        $(".accordion-list").accordionList(), document.getElementsByClassName || (document.getElementsByClassName = function(className) {
            return this.querySelectorAll("." + className);
        }, Element.prototype.getElementsByClassName = document.getElementsByClassName), 
        $(".nav-meta .search").on("click", "a", function() {
            return $(".page").toggleClass("searchbar-active"), $("#_lookaheadsearch_WAR_CustomPortletsportlet_keyword").focus(), 
            !1;
        });
        var mainMenuItemCurrent = function() {
            var $breadCrumb = $(".breadcrumbs-horizontal");
            if ($breadCrumb.length > 0) for (var menuName = $breadCrumb.find("li").first().text(), $menuItems = $(".nav-main").first().find("a"), i = 0; i < $menuItems.length; i++) $menuItems.eq(i).text() === menuName && $menuItems.eq(i).parent().addClass("current");
        };
        mainMenuItemCurrent();
        var $shareModule = $('<div id="shareModule" class="row-fluid"><div class="span10"></div><div class="share-this-block span2"><label for="share-this-toggle" id="share-this-label" class="share"><span class="icon">Share</span></label><div class="share-wrapper drilldown"></div></div></div>');
        $(".homepage").length > 0 ? $("#layout-column_column-1").css("position", "relative").prepend($shareModule) : $(".site-main .portlet-search").length && $(".site-main .portlet-search form .aui-fieldset").css("position", "relative").append($shareModule.addClass("span2"));
        var shareLinks = '<ul class="social-bookmarks"> <li class="facebook"> <a class="facebook addthis_button_facebook">Facebook</a></li><li class="twitter"> <a class="twitter addthis_button_twitter" tw:via="GOTO2040">Twitter</a></li> <li class="google"> <a class="google addthis_button_google_plusone_share">Google+</a></li> <li class="pinterest"> <a class="pinterest addthis_button_pinterest_share">Pinterest</a></li> <li class="email"> <a class="email addthis_button_email">Email</a></li></ul>';
        1 == $(".share-wrapper").length && ($(".share-wrapper").empty().html(shareLinks), 
        $(".share-wrapper").responsiveArrowDropdown({
            triggerSelector: "#share-this-label"
        })), $("#share-this-label .icon").length || $("#share-this-label").html('<span class="icon">Share</span>'), 
        $("#share-this-label").hasClass("share") || $("#share-this-label").addClass("share"), 
        $(".in-page-anchors").on("click", "a", function(e) {
            e.preventDefault();
            var href = $(this).attr("href");
            animateTo(href);
        }), $(".in-page-anchors").stickyNav(), $(".mega-menu > li > ul").each(function() {
            $(this).find("ul").each(function() {
                $(this).parent().addClass("nmsw-sub");
            }), $($(this).wrap('<div class="nav-main-sub-wrap"/>')).wrap('<div class="width-limit"/>');
        }), $(".mega-menu .root-cat-li").on("click", "a", function(e) {
            var $this = $(this), $parent = $this.parent(), thisHasLink = !/^(\#)$/i.test($this.attr("href"));
            return $(window).width() > 768 && $parent.hasClass("root-cat-li") ? (console.log($parent), 
            thisHasLink ? ($parent.siblings().removeClass("active"), $parent.toggleClass("active")) : $(".nmsw-sub").trigger("click"), 
            !1) : void (thisHasLink && e.stopPropagation());
        }), $(".mega-menu .root-cat-li").on("click", ".nmsw-sub", function() {
            var $this = $(this);
            $this.siblings().removeClass("active"), $this.toggleClass("active");
        });
    }), $(window).on("load", function() {
        $.assetCategoryPreEllipsisClick = function() {
            $(this).next().toggle(), $(this).toggleClass("expanded");
        }, $.assetCategoryPostEllipsisClick = function() {
            $(this).hide(), $(this).prev().removeClass("expanded");
        }, $(".asset-category-pre-ellipsis").off("click", $.assetCategoryPreEllipsisClick).on("click", $.assetCategoryPreEllipsisClick).find("a").click(function(e) {
            e.stopPropagation();
        }), $(".asset-category-post-ellipsis").off("click", $.assetCategoryPostEllipsisClick).on("click", $.assetCategoryPostEllipsisClick).find("a").click(function(e) {
            e.stopPropagation();
        }), $(".slider-hero.slider-tabs .slides").slick({
            infinite: !1,
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: !1,
            dots: !0,
            fade: !0,
            customPaging: function(slider, i) {
                return "<h3>" + $(slider.$slides[i]).find(".slide-title").text() + "</h3>";
            },
            responsive: [ {
                breakpoint: 769,
                settings: {
                    dots: !0,
                    customPaging: function(slider, i) {
                        return '<button type="button" data-role="none">' + (i + 1) + "</button>";
                    }
                }
            } ]
        }), $(".slider-hero.slider-no-tabs .slides").on("init", function(e, slick) {
            slick.$list.find(".photo-credit").each(function(index, element) {
                var el = $(element), target = el.closest(".slides").find(".slick-dots"), targetRight = 0;
                target.length > 0 ? (targetRight = target.offset().left + target.width() + 10, el.css({
                    left: targetRight + "px"
                })) : el.css({
                    left: "auto"
                });
            });
        }), $(".slider-hero.slider-no-tabs .slides").slick({
            infinite: !1,
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: !0,
            dots: !1,
            responsive: [ {
                breakpoint: 769,
                settings: {
                    arrows: !1,
                    dots: !0
                }
            } ]
        });
        var mobileDotSliderInit = function(e, slick) {
            $(e.target).closest(".slider").next(".view-all-x-updates-link").each(function(index, element) {
                var target = $(element).prev(".slider").find(".slick-dots");
                console.log("logging first target"), console.log(target);
                var targetRight = 0;
                target.length > 0 ? (slick.slickFilter(":lt(4)"), target = $(element).prev(".slider").find(".slick-dots"), 
                console.log("logging second target"), console.log(target), targetRight = target.offset().left + target.width() + 10, 
                $(this).css({
                    left: targetRight + "px"
                })) : (slick.slickUnfilter(), target = $(element).prev(".slider"), target.length > 0 && $(this).css({
                    left: target.css("margin-left")
                }));
            });
        };
        if ($(".slider-partner-spotlight .slider .slides").on("init", mobileDotSliderInit), 
        $(".slider-partner-spotlight .slider").randomizeInGroups("li.slide", "div.slide-inner"), 
        $(".slider-partner-spotlight .slider div.slide-inner:odd").removeClass("slide-left").addClass("slide-right"), 
        $(".slider-partner-spotlight .slider div.slide-inner:even").removeClass("slide-right").addClass("slide-left"), 
        $(".slider-partner-spotlight .slider .slides").slick({
            infinite: !1,
            slidesToShow: 2,
            slidesToScroll: 2,
            arrows: !0,
            dots: !1,
            responsive: [ {
                breakpoint: 769,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    arrows: !1,
                    dots: !0
                }
            } ]
        }), $(".portlet-asset-publisher.slider").length) {
            $assetPublisherSlider = $(".portlet-asset-publisher.slider"), $assetPublisherSlider.each(function() {
                var portletTitle = $(this).find(".portlet-body .portlet-topper .portlet-title .portlet-title-text").text(), $titleContainer = '<h2 class="slider-title" title="' + portletTitle + '">' + portletTitle + "</h2>";
                $(this).prepend($titleContainer), $(this).find(".asset-abstract").wrapAll('<div class="slider" />').wrapAll('<div class="slides" />').css("display", "block");
            }), $(".portlet-asset-publisher.slider .slider .slides").on("init", mobileDotSliderInit), 
            $(".portlet-asset-publisher.slider .slider .slides").slick({
                infinite: !1,
                slidesToShow: 3,
                slidesToScroll: 3,
                arrows: !0,
                dots: !1,
                responsive: [ {
                    breakpoint: 769,
                    settings: {
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        arrows: !1,
                        dots: !0
                    }
                } ]
            });
        }
    });
    var mobileSearchItem = null, desktopSearchItem = null, prevWidth = $(window).width(), firstLoad = !0;
    $(window).on("load resize", function() {
        if ($(window).width() <= 768 && (prevWidth > 768 || firstLoad)) {
            if ($("#footer").trigger("mobileSize"), $(".portlet-boundary").trigger("mobileSize"), 
            $(".slider-featuring .slide").trigger("mobileSize"), $(".mega-menu.items").trigger("mobileSize"), 
            $(".calendar").trigger("mobileSize"), $(".meta-data .more-in-section, .meta-data .breadcrumbs-wrap").trigger("mobileSize"), 
            $(".meta-data .share-this-block").trigger("mobileSize"), $(".mobile-secondary-menu").trigger("mobileSize"), 
            $(".mobile-nav-main-label").trigger("mobileSize"), $(".slider-tabs .slide").each(function(index, element) {
                $(element).css("background-image", "url(" + $(element).data("mobileimage") + ")");
            }), "undefined" != typeof mobileSearchItem) {
                try {
                    $("input.look-ahead-keyword").autocomplete("destroy");
                } catch (e) {}
                try {
                    mobileSearchItem.find(".look-ahead-keyword").autocomplete({
                        minLength: 2,
                        source: typeAheadSource,
                        select: typeAheadSelect,
                        position: {
                            my: "center top+10",
                            at: "center bottom",
                            collision: "none"
                        }
                    });
                } catch (e) {}
            }
        } else if ($(window).width() > 768 && (768 >= prevWidth || firstLoad) && ($("#footer").trigger("desktopSize"), 
        $(".portlet-boundary").trigger("desktopSize"), $(".slider-featuring .slide").trigger("desktopSize"), 
        $(".mega-menu.items").trigger("desktopSize"), $(".calendar").trigger("desktopSize"), 
        $(".meta-data .more-in-section, .meta-data .breadcrumbs-wrap").trigger("desktopSize"), 
        $(".meta-data .share-this-block").trigger("desktopSize"), $(".mobile-secondary-menu").trigger("desktopSize"), 
        $(".mobile-nav-main-label").trigger("desktopSize"), $(".slider-tabs .slide").each(function(index, element) {
            $(element).css("background-image", "url(" + $(element).data("image") + ")");
        }), "undefined" != typeof desktopSearchItem)) {
            try {
                $("input.look-ahead-keyword").autocomplete("destroy");
            } catch (e) {}
            try {
                desktopSearchItem.find(".look-ahead-keyword").autocomplete({
                    minLength: 2,
                    source: typeAheadSource,
                    select: typeAheadSelect
                });
            } catch (e) {}
        }
        firstLoad = !1, prevWidth = $(window).width(), "undefined" != typeof $primary && ($(this).width() > 767 ? $primary.css("min-height", 800) : $primary.css("min-height", 0));
    });
}(jQuery), function($, window, undefined) {
    "use strict";
    var cmapApp = {
        settings: {
            primary: $(".primary"),
            secondary: $(".secondary"),
            mainNavigation: $(".mega-menu"),
            secondaryNavigation: $(".secondary .nav-menu"),
            moreInSection: $(".more-in-section"),
            breadcrumbSection: $(".breadcrumbs-wrap"),
            calendar: $(".calendar"),
            leadText: $(".lead"),
            pageMetaBar: $(".page-meta-data")
        },
        init: function(settings) {
            $.extend({}, this.settings, settings), this.bindEvents(), $.each(this.settings.leadText, $.proxy(function(index, textContainer) {
                this.attachAnchor_More(textContainer, ".constrain", "bg-intro");
            }, this));
        },
        bindEvents: function() {
            console.debug("binding events....???"), this.settings.secondaryNavigation.length > 0 && ($.proxy(this.buildSecondaryMobileNav, this)(), 
            this.settings.moreInSection.on("change", "select", function() {
                window.location = $(this).find("option:selected").val();
            })), this.settings.calendar.length > 0 && $("a.calendar-event-detail-link").on("click", this.calendarEventDetailClick), 
            this.settings.leadText.on("click", ".more", function() {
                return cmapApp.animateToAnchor(this, ".portlet-boundary", 64), !1;
            }), $(window).on("scroll", function() {
                cmapApp.fixedSelector(this, "#main-content");
            }), $(".mobile-nav-main-label").on("click", function(event) {
                return $("body").toggleClass("main-mobile-active"), $("body").hasClass("main-mobile-active") ? ($("body").height($(window).innerHeight()), 
                $("#page").height($("#navigation").height() + 120 + 72)) : ($("body").css("height", "auto"), 
                $("#page").css("height", "auto")), !1;
            });
        },
        buildSecondaryMobileNav: function() {
            var $mobileSecondaryNavWrap = $('<div class="mobile-secondary-menu" />'), $mobileSelect_frag = $("<select class='nav-secondary-mobile' />"), $mobileOption_frag = function(selected, value, text) {
                return $("<option />").attr({
                    selected: selected,
                    value: value
                }).text(text);
            }, navigationItems = this.settings.secondaryNavigation.find("a"), navItemsNum = navigationItems.length;
            $mobileSelect_frag.append($mobileOption_frag("selected", "", "More in this section"), $mobileOption_frag(!1, "", "---")), 
            $.each(navigationItems, $.proxy(function(index, links) {
                $mobileSelect_frag.append($mobileOption_frag(!1, $(links).attr("href"), $(links).text())), 
                --navItemsNum || ($mobileSecondaryNavWrap.append($mobileSelect_frag), this.settings.moreInSection.append($mobileSecondaryNavWrap));
            }, this));
        },
        calendarEventDetailClick: function(event) {
            event.preventDefault();
            var anchor = $(this);
            if (null == anchor.attr("popover")) {
                var href = $(this).attr("href"), eventId = href.match(/\d+$/)[0], date = $(this).attr("date"), timestamp = $(this).attr("timestamp");
                $.ajax({
                    type: "GET",
                    url: href,
                    success: function(data) {
                        data = data.substring(data.indexOf("<body"), data.indexOf("</html")).replace(/\s+/g, " ");
                        var doc = $(data).find(".portlet-calendar").wrapAll("<div></div>").parent(), exportLink = doc.find('a[id$="export"]'), exportLinkHref = exportLink.attr("href"), ppIdRegex = /p\_p\_id=(\d+)/, ppId = exportLinkHref.match(ppIdRegex)[1];
                        exportLinkHref += "&_" + ppId + "_exportFileName=event.ics";
                        var link = doc.find('[id*="_link"]').text();
                        doc.find(".event-content>div:eq(1),.event-content p,.header-back-to,.portlet-topper,.taglib-custom-attributes-list").remove();
                        var details = doc.find(".property-list dt"), detailArr = new Object(), detailStr = "";
                        details.each(function(index, element) {
                            var dt = $(element), dd = dt.next();
                            detailArr[dt.text()] = dd.text(), detailStr += dt.text() + dd.text() + "\n\n";
                        });
                        var eventName = anchor.text(), address = doc.find(".location").text(), mailHref = "mailto:?subject=CMAP EVENT-" + eventName + "&body=You've been sent an event announcement from the Chicago Metropolitan Agency for Planning event calendar.%0A%0A";
                        mailHref += "Event Name: " + eventName + "%0A%0A", mailHref += escape(detailStr), 
                        null != address && address.length > 0 && (mailHref += escape("%0ADirections: http://maps.google.com/maps?f=q&hl=en&q=to+" + address + "%0A%0A")), 
                        mailHref += "For more info on CMAP see http://www.cmap.illinois.gov/%0AFor more events see http://www.cmap.illinois.gov/events";
                        var learnMoreLink = "";
                        null != link && "" != link && (learnMoreLink = '<div><a class="calendar-learn-more-link" target="_blank" href="' + link + '">Learn More</a></div>');
                        var mapLink = "";
                        null != address && address.length > 0 && (mapLink = '<div class="calendar-item-ctas"><a class="calendar-map-link" target="_blank" href="http://maps.google.com/maps?f=q&amp;hl=en&amp;q=to+' + escape(address) + '">Get Directions</a>');
                        var calendarLink = '<a class="calendar-add-to-calendar-link" href="' + exportLinkHref + '">Add to Calendar</a>', mailLink = '<a class="calendar-mail-link" href="#" onclick="return jQuery.fn.triggerEmailForm(' + eventId + "," + timestamp + ');">Email to Friend</a></div>';
                        doc.find(".property-list").after($(learnMoreLink + mapLink + calendarLink + mailLink)), 
                        doc.find(".aui-w75").removeClass("aui-w75");
                        var eventDuration = (doc.find("dd.event-start-date").text().trim(), doc.find("dd.event-duration").text().trim()), eventLocation = doc.find("dd.event-location").text().trim();
                        doc.find(".property-list").before('<div class="event-property event-start-date">' + date + "</div>").before('<div class="event-property event-duration">' + eventDuration + "</div>").before('<div class="event-property event-location">' + eventLocation + "</div>"), 
                        doc.find(".property-list").remove(), anchor.attr("popover", doc.html()), $(".event-detail-popover .ui-dialog-content:visible").dialog("close"), 
                        $(anchor.attr("popover")).dialog({
                            position: {
                                my: "left top",
                                at: "left bottom+30",
                                of: anchor
                            },
                            dialogClass: "event-detail-popover",
                            width: "auto"
                        }).dialog("open");
                    }
                });
            } else $(".event-detail-popover .ui-dialog-content:visible").dialog("close"), $(anchor.attr("popover")).dialog({
                position: {
                    my: "left top",
                    at: "left bottom+30",
                    of: anchor
                },
                dialogClass: "event-detail-popover",
                width: "auto"
            }).dialog("open");
        },
        attachAnchor_More: function(el, closestSelector, hasClass) {
            if ($(el).closest(closestSelector).hasClass(hasClass)) {
                var moreAnchorLink_frag = $("<a />").attr("href", "#more").addClass("more").text("More");
                $(el).append(moreAnchorLink_frag);
            }
        },
        animateToAnchor: function(el, animateToSelector, topOffset) {
            var next = $(el).closest(animateToSelector).next();
            $("html,body").animate({
                scrollTop: next.offset().top - topOffset
            }, 800);
        },
        getSelectorOffset: function(selector) {
            return $(selector).offset();
        },
        fixedSelector: function(baseSelector, selector) {
            baseSelector = "undefined" != typeof baseSelector ? baseSelector === window ? {
                top: $(window).scrollTop(),
                left: 0
            } : cmapApp.getSelectorOffset(baseSelector) : {
                top: 0,
                left: 0
            };
            var baseOffset = baseSelector, elOffset = cmapApp.getSelectorOffset(selector), $el = $(selector);
            baseOffset.top > elOffset.top ? $el.addClass("fixed") : $el.removeClass("fixed");
        }
    };
    $(function() {
        cmapApp.init();
    });
}(jQuery, window), jQuery.fn.labelOver = function(overClass) {
    return jQuery(this).each(function() {
        var label = jQuery(this), f = label.attr("for");
        if (f) {
            var input = jQuery("#" + f);
            label.width() > input.width() && input.attr("style", "max-width: 1000px !important; width:" + (label.width() + 40).toString() + "px !important;"), 
            label.hide = function() {
                label.css({
                    textIndent: "-10000px"
                });
            }, label.show = function() {
                (null == input.val() || "" == input.val()) && label.css({
                    textIndent: 0
                });
            }, input.focus(label.hide), input.blur(label.show), label.addClass(overClass).click(function() {
                input.focus();
            }), "" != input.val() && label.hide();
        }
    });
}, jQuery(document).ready(function() {
    $(".web-form-portlet label.aui-field-label").filter(function() {
        return $(this).parents(".web-form-portlet-radio-group").length < 1;
    }).labelOver("over"), $(".drilldown").drilldown(), $(".nav-secondary-mobile, #jumpToSelect, #resultTypeSelect").simpleselect(), 
    $("#jumpToSelect").on("change", $.taglibOnJump);
});